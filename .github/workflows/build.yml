name: Build and Release

on:
  push:
    branches:
      - release

jobs:
  build_sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Build SDist
        run: |
          python -m pip install build
          python -m build --sdist
          
      - name: Check metadata
        run: |
          python -m pip install twine
          twine check dist/*
          
      - name: Upload SDist
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ['cp39', 'cp310', 'cp311', 'cp312']
        include:
          - os: ubuntu-latest
            platform: manylinux_x86_64
          - os: windows-latest
            platform: win_amd64
          - os: macos-latest
            platform: macosx_*

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.platform }}
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel -w {dest_dir} -v {wheel}"
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: "pytest {project}"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python }}
          path: ./wheelhouse/*.whl

  test_wheels:
    needs: build_wheels
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Install and test wheel
        shell: bash
        run: |
          python -m venv venv
          if [ "${{ runner.os }}" == "Windows" ]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          # Convert Python version to cp format (e.g., 3.9 -> cp39)
          python_cp_version="cp$(echo ${{ matrix.python-version }} | tr -d '.')"
          python -m pip install --find-links dist/wheels-${{ matrix.os }}-${python_cp_version} *.whl
          python -m pip install pytest
          pytest .

  upload_pypi:
    needs: [build_wheels, build_sdist, test_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Move files to dist root
        run: |
          find dist -type f -exec mv {} dist/ \;
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_PASSWORD }}
          skip_existing: true
          verbose: true